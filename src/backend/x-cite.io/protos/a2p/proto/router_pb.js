 /* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_basic_pb = require('../proto/basic_pb.js');
goog.exportSymbol('proto.xcite.a2p.router.v1.CostLookupRequest', null, global);
goog.exportSymbol('proto.xcite.a2p.router.v1.CostLookupResponse', null, global);
goog.exportSymbol('proto.xcite.a2p.router.v1.GetBalanceRequest', null, global);
goog.exportSymbol('proto.xcite.a2p.router.v1.GetBalanceResponse', null, global);
goog.exportSymbol('proto.xcite.a2p.router.v1.GetTransactionHistoryResponse', null, global);
goog.exportSymbol('proto.xcite.a2p.router.v1.incomingMessageRequest', null, global);
goog.exportSymbol('proto.xcite.a2p.router.v1.incomingMessageResponse', null, global);
goog.exportSymbol('proto.xcite.a2p.router.v1.incomingMessageResponse.Result', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcite.a2p.router.v1.incomingMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcite.a2p.router.v1.incomingMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcite.a2p.router.v1.incomingMessageRequest.displayName = 'proto.xcite.a2p.router.v1.incomingMessageRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcite.a2p.router.v1.incomingMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcite.a2p.router.v1.incomingMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcite.a2p.router.v1.incomingMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.a2p.router.v1.incomingMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sms: (f = msg.getSms()) && proto_basic_pb.SMS.toObject(includeInstance, f),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcite.a2p.router.v1.incomingMessageRequest}
 */
proto.xcite.a2p.router.v1.incomingMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcite.a2p.router.v1.incomingMessageRequest;
  return proto.xcite.a2p.router.v1.incomingMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcite.a2p.router.v1.incomingMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcite.a2p.router.v1.incomingMessageRequest}
 */
proto.xcite.a2p.router.v1.incomingMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_basic_pb.SMS;
      reader.readMessage(value,proto_basic_pb.SMS.deserializeBinaryFromReader);
      msg.setSms(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcite.a2p.router.v1.incomingMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcite.a2p.router.v1.incomingMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcite.a2p.router.v1.incomingMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.a2p.router.v1.incomingMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSms();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_basic_pb.SMS.serializeBinaryToWriter
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional xcite.a2p.model.v1.SMS sms = 1;
 * @return {?proto.xcite.a2p.model.v1.SMS}
 */
proto.xcite.a2p.router.v1.incomingMessageRequest.prototype.getSms = function() {
  return /** @type{?proto.xcite.a2p.model.v1.SMS} */ (
    jspb.Message.getWrapperField(this, proto_basic_pb.SMS, 1));
};


/** @param {?proto.xcite.a2p.model.v1.SMS|undefined} value */
proto.xcite.a2p.router.v1.incomingMessageRequest.prototype.setSms = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcite.a2p.router.v1.incomingMessageRequest.prototype.clearSms = function() {
  this.setSms(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcite.a2p.router.v1.incomingMessageRequest.prototype.hasSms = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.xcite.a2p.router.v1.incomingMessageRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcite.a2p.router.v1.incomingMessageRequest.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcite.a2p.router.v1.incomingMessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcite.a2p.router.v1.incomingMessageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcite.a2p.router.v1.incomingMessageResponse.displayName = 'proto.xcite.a2p.router.v1.incomingMessageResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcite.a2p.router.v1.incomingMessageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcite.a2p.router.v1.incomingMessageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcite.a2p.router.v1.incomingMessageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.a2p.router.v1.incomingMessageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionId: (f = msg.getTransactionId()) && proto_basic_pb.UUID.toObject(includeInstance, f),
    result: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcite.a2p.router.v1.incomingMessageResponse}
 */
proto.xcite.a2p.router.v1.incomingMessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcite.a2p.router.v1.incomingMessageResponse;
  return proto.xcite.a2p.router.v1.incomingMessageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcite.a2p.router.v1.incomingMessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcite.a2p.router.v1.incomingMessageResponse}
 */
proto.xcite.a2p.router.v1.incomingMessageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_basic_pb.UUID;
      reader.readMessage(value,proto_basic_pb.UUID.deserializeBinaryFromReader);
      msg.setTransactionId(value);
      break;
    case 2:
      var value = /** @type {!proto.xcite.a2p.router.v1.incomingMessageResponse.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcite.a2p.router.v1.incomingMessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcite.a2p.router.v1.incomingMessageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcite.a2p.router.v1.incomingMessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.a2p.router.v1.incomingMessageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_basic_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.xcite.a2p.router.v1.incomingMessageResponse.Result = {
  SUCCESS: 0,
  GENERIC_ERROR: 1,
  UNKOWN_COUNTRY_PREFIX: 2,
  WRONG_NUMBER_FORMAT: 3,
  SUBSCRIBER_SUSPENDED: 4,
  OUT_OF_BALANCE: 5
};

/**
 * optional xcite.a2p.model.v1.UUID transaction_id = 1;
 * @return {?proto.xcite.a2p.model.v1.UUID}
 */
proto.xcite.a2p.router.v1.incomingMessageResponse.prototype.getTransactionId = function() {
  return /** @type{?proto.xcite.a2p.model.v1.UUID} */ (
    jspb.Message.getWrapperField(this, proto_basic_pb.UUID, 1));
};


/** @param {?proto.xcite.a2p.model.v1.UUID|undefined} value */
proto.xcite.a2p.router.v1.incomingMessageResponse.prototype.setTransactionId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.xcite.a2p.router.v1.incomingMessageResponse.prototype.clearTransactionId = function() {
  this.setTransactionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xcite.a2p.router.v1.incomingMessageResponse.prototype.hasTransactionId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Result result = 2;
 * @return {!proto.xcite.a2p.router.v1.incomingMessageResponse.Result}
 */
proto.xcite.a2p.router.v1.incomingMessageResponse.prototype.getResult = function() {
  return /** @type {!proto.xcite.a2p.router.v1.incomingMessageResponse.Result} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.xcite.a2p.router.v1.incomingMessageResponse.Result} value */
proto.xcite.a2p.router.v1.incomingMessageResponse.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcite.a2p.router.v1.CostLookupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcite.a2p.router.v1.CostLookupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcite.a2p.router.v1.CostLookupRequest.displayName = 'proto.xcite.a2p.router.v1.CostLookupRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcite.a2p.router.v1.CostLookupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcite.a2p.router.v1.CostLookupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcite.a2p.router.v1.CostLookupRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.a2p.router.v1.CostLookupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: jspb.Message.getFieldWithDefault(msg, 1, ""),
    destination: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcite.a2p.router.v1.CostLookupRequest}
 */
proto.xcite.a2p.router.v1.CostLookupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcite.a2p.router.v1.CostLookupRequest;
  return proto.xcite.a2p.router.v1.CostLookupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcite.a2p.router.v1.CostLookupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcite.a2p.router.v1.CostLookupRequest}
 */
proto.xcite.a2p.router.v1.CostLookupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcite.a2p.router.v1.CostLookupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcite.a2p.router.v1.CostLookupRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcite.a2p.router.v1.CostLookupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.a2p.router.v1.CostLookupRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDestination();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string sender = 1;
 * @return {string}
 */
proto.xcite.a2p.router.v1.CostLookupRequest.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcite.a2p.router.v1.CostLookupRequest.prototype.setSender = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string destination = 2;
 * @return {string}
 */
proto.xcite.a2p.router.v1.CostLookupRequest.prototype.getDestination = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcite.a2p.router.v1.CostLookupRequest.prototype.setDestination = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcite.a2p.router.v1.CostLookupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcite.a2p.router.v1.CostLookupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcite.a2p.router.v1.CostLookupResponse.displayName = 'proto.xcite.a2p.router.v1.CostLookupResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcite.a2p.router.v1.CostLookupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcite.a2p.router.v1.CostLookupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcite.a2p.router.v1.CostLookupResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.a2p.router.v1.CostLookupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cost: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcite.a2p.router.v1.CostLookupResponse}
 */
proto.xcite.a2p.router.v1.CostLookupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcite.a2p.router.v1.CostLookupResponse;
  return proto.xcite.a2p.router.v1.CostLookupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcite.a2p.router.v1.CostLookupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcite.a2p.router.v1.CostLookupResponse}
 */
proto.xcite.a2p.router.v1.CostLookupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcite.a2p.router.v1.CostLookupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcite.a2p.router.v1.CostLookupResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcite.a2p.router.v1.CostLookupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.a2p.router.v1.CostLookupResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string cost = 1;
 * @return {string}
 */
proto.xcite.a2p.router.v1.CostLookupResponse.prototype.getCost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcite.a2p.router.v1.CostLookupResponse.prototype.setCost = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcite.a2p.router.v1.GetBalanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcite.a2p.router.v1.GetBalanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcite.a2p.router.v1.GetBalanceRequest.displayName = 'proto.xcite.a2p.router.v1.GetBalanceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcite.a2p.router.v1.GetBalanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcite.a2p.router.v1.GetBalanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcite.a2p.router.v1.GetBalanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.a2p.router.v1.GetBalanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    month: jspb.Message.getFieldWithDefault(msg, 2, ""),
    year: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcite.a2p.router.v1.GetBalanceRequest}
 */
proto.xcite.a2p.router.v1.GetBalanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcite.a2p.router.v1.GetBalanceRequest;
  return proto.xcite.a2p.router.v1.GetBalanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcite.a2p.router.v1.GetBalanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcite.a2p.router.v1.GetBalanceRequest}
 */
proto.xcite.a2p.router.v1.GetBalanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMonth(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setYear(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcite.a2p.router.v1.GetBalanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcite.a2p.router.v1.GetBalanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcite.a2p.router.v1.GetBalanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.a2p.router.v1.GetBalanceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMonth();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getYear();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.xcite.a2p.router.v1.GetBalanceRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcite.a2p.router.v1.GetBalanceRequest.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string month = 2;
 * @return {string}
 */
proto.xcite.a2p.router.v1.GetBalanceRequest.prototype.getMonth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcite.a2p.router.v1.GetBalanceRequest.prototype.setMonth = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string year = 3;
 * @return {string}
 */
proto.xcite.a2p.router.v1.GetBalanceRequest.prototype.getYear = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xcite.a2p.router.v1.GetBalanceRequest.prototype.setYear = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcite.a2p.router.v1.GetBalanceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcite.a2p.router.v1.GetBalanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcite.a2p.router.v1.GetBalanceResponse.displayName = 'proto.xcite.a2p.router.v1.GetBalanceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcite.a2p.router.v1.GetBalanceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcite.a2p.router.v1.GetBalanceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcite.a2p.router.v1.GetBalanceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.a2p.router.v1.GetBalanceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcite.a2p.router.v1.GetBalanceResponse}
 */
proto.xcite.a2p.router.v1.GetBalanceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcite.a2p.router.v1.GetBalanceResponse;
  return proto.xcite.a2p.router.v1.GetBalanceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcite.a2p.router.v1.GetBalanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcite.a2p.router.v1.GetBalanceResponse}
 */
proto.xcite.a2p.router.v1.GetBalanceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcite.a2p.router.v1.GetBalanceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcite.a2p.router.v1.GetBalanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcite.a2p.router.v1.GetBalanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.a2p.router.v1.GetBalanceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string total = 1;
 * @return {string}
 */
proto.xcite.a2p.router.v1.GetBalanceResponse.prototype.getTotal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcite.a2p.router.v1.GetBalanceResponse.prototype.setTotal = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcite.a2p.router.v1.GetTransactionHistoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcite.a2p.router.v1.GetTransactionHistoryResponse.repeatedFields_, null);
};
goog.inherits(proto.xcite.a2p.router.v1.GetTransactionHistoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xcite.a2p.router.v1.GetTransactionHistoryResponse.displayName = 'proto.xcite.a2p.router.v1.GetTransactionHistoryResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcite.a2p.router.v1.GetTransactionHistoryResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcite.a2p.router.v1.GetTransactionHistoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcite.a2p.router.v1.GetTransactionHistoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcite.a2p.router.v1.GetTransactionHistoryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.a2p.router.v1.GetTransactionHistoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    detailsList: jspb.Message.toObjectList(msg.getDetailsList(),
    proto_basic_pb.GetTransactionHistoryResponse.Point.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcite.a2p.router.v1.GetTransactionHistoryResponse}
 */
proto.xcite.a2p.router.v1.GetTransactionHistoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcite.a2p.router.v1.GetTransactionHistoryResponse;
  return proto.xcite.a2p.router.v1.GetTransactionHistoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcite.a2p.router.v1.GetTransactionHistoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcite.a2p.router.v1.GetTransactionHistoryResponse}
 */
proto.xcite.a2p.router.v1.GetTransactionHistoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_basic_pb.GetTransactionHistoryResponse.Point;
      reader.readMessage(value,proto_basic_pb.GetTransactionHistoryResponse.Point.deserializeBinaryFromReader);
      msg.addDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcite.a2p.router.v1.GetTransactionHistoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcite.a2p.router.v1.GetTransactionHistoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcite.a2p.router.v1.GetTransactionHistoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.a2p.router.v1.GetTransactionHistoryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDetailsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto_basic_pb.GetTransactionHistoryResponse.Point.serializeBinaryToWriter
    );
  }
};


/**
 * repeated xcite.a2p.model.v1.GetTransactionHistoryResponse.Point details = 1;
 * @return {!Array<!proto.xcite.a2p.model.v1.GetTransactionHistoryResponse.Point>}
 */
proto.xcite.a2p.router.v1.GetTransactionHistoryResponse.prototype.getDetailsList = function() {
  return /** @type{!Array<!proto.xcite.a2p.model.v1.GetTransactionHistoryResponse.Point>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_basic_pb.GetTransactionHistoryResponse.Point, 1));
};


/** @param {!Array<!proto.xcite.a2p.model.v1.GetTransactionHistoryResponse.Point>} value */
proto.xcite.a2p.router.v1.GetTransactionHistoryResponse.prototype.setDetailsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.xcite.a2p.model.v1.GetTransactionHistoryResponse.Point=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcite.a2p.model.v1.GetTransactionHistoryResponse.Point}
 */
proto.xcite.a2p.router.v1.GetTransactionHistoryResponse.prototype.addDetails = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.xcite.a2p.model.v1.GetTransactionHistoryResponse.Point, opt_index);
};


proto.xcite.a2p.router.v1.GetTransactionHistoryResponse.prototype.clearDetailsList = function() {
  this.setDetailsList([]);
};


goog.object.extend(exports, proto.xcite.a2p.router.v1);
