 /* eslint-disable */

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var x$cite_io_protos_model_basic_pb = require('../../../x-cite.io/protos/model/basic_pb.js');
goog.object.extend(proto, x$cite_io_protos_model_basic_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var googleapis_google_type_latlng_pb = require('../../../googleapis/google/type/latlng_pb.js');
goog.object.extend(proto, googleapis_google_type_latlng_pb);
goog.exportSymbol('proto.xcite.iot.model.v1.DeviceTracker', null, global);
goog.exportSymbol('proto.xcite.iot.model.v1.MobileNetworkInfo', null, global);
goog.exportSymbol('proto.xcite.iot.model.v1.TrackerReport', null, global);
goog.exportSymbol('proto.xcite.iot.model.v1.TrackerReport.GpsFixStatus', null, global);
goog.exportSymbol('proto.xcite.iot.model.v1.TrackerStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcite.iot.model.v1.DeviceTracker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcite.iot.model.v1.DeviceTracker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcite.iot.model.v1.DeviceTracker.displayName = 'proto.xcite.iot.model.v1.DeviceTracker';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcite.iot.model.v1.MobileNetworkInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcite.iot.model.v1.MobileNetworkInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcite.iot.model.v1.MobileNetworkInfo.displayName = 'proto.xcite.iot.model.v1.MobileNetworkInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcite.iot.model.v1.TrackerReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcite.iot.model.v1.TrackerReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcite.iot.model.v1.TrackerReport.displayName = 'proto.xcite.iot.model.v1.TrackerReport';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcite.iot.model.v1.DeviceTracker.prototype.toObject = function(opt_includeInstance) {
  return proto.xcite.iot.model.v1.DeviceTracker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcite.iot.model.v1.DeviceTracker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.iot.model.v1.DeviceTracker.toObject = function(includeInstance, msg) {
  var obj = {
    vendorSn: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vendorImei: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    iotCertificate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    iotPrivateKey: jspb.Message.getFieldWithDefault(msg, 5, ""),
    iotPublicKey: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcite.iot.model.v1.DeviceTracker}
 */
proto.xcite.iot.model.v1.DeviceTracker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcite.iot.model.v1.DeviceTracker;
  return proto.xcite.iot.model.v1.DeviceTracker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcite.iot.model.v1.DeviceTracker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcite.iot.model.v1.DeviceTracker}
 */
proto.xcite.iot.model.v1.DeviceTracker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVendorSn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVendorImei(value);
      break;
    case 3:
      var value = /** @type {!proto.xcite.iot.model.v1.TrackerStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIotCertificate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIotPrivateKey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIotPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcite.iot.model.v1.DeviceTracker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcite.iot.model.v1.DeviceTracker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcite.iot.model.v1.DeviceTracker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.iot.model.v1.DeviceTracker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVendorSn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVendorImei();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getIotCertificate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIotPrivateKey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIotPublicKey();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string vendor_sn = 1;
 * @return {string}
 */
proto.xcite.iot.model.v1.DeviceTracker.prototype.getVendorSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcite.iot.model.v1.DeviceTracker.prototype.setVendorSn = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string vendor_imei = 2;
 * @return {string}
 */
proto.xcite.iot.model.v1.DeviceTracker.prototype.getVendorImei = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcite.iot.model.v1.DeviceTracker.prototype.setVendorImei = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TrackerStatus status = 3;
 * @return {!proto.xcite.iot.model.v1.TrackerStatus}
 */
proto.xcite.iot.model.v1.DeviceTracker.prototype.getStatus = function() {
  return /** @type {!proto.xcite.iot.model.v1.TrackerStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.xcite.iot.model.v1.TrackerStatus} value */
proto.xcite.iot.model.v1.DeviceTracker.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string iot_certificate = 4;
 * @return {string}
 */
proto.xcite.iot.model.v1.DeviceTracker.prototype.getIotCertificate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.xcite.iot.model.v1.DeviceTracker.prototype.setIotCertificate = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string iot_private_key = 5;
 * @return {string}
 */
proto.xcite.iot.model.v1.DeviceTracker.prototype.getIotPrivateKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.xcite.iot.model.v1.DeviceTracker.prototype.setIotPrivateKey = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string iot_public_key = 6;
 * @return {string}
 */
proto.xcite.iot.model.v1.DeviceTracker.prototype.getIotPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.xcite.iot.model.v1.DeviceTracker.prototype.setIotPublicKey = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcite.iot.model.v1.MobileNetworkInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcite.iot.model.v1.MobileNetworkInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcite.iot.model.v1.MobileNetworkInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.iot.model.v1.MobileNetworkInfo.toObject = function(includeInstance, msg) {
  var obj = {
    gsmSignal: jspb.Message.getFieldWithDefault(msg, 8, 0),
    mcc: jspb.Message.getFieldWithDefault(msg, 9, 0),
    mnc: jspb.Message.getFieldWithDefault(msg, 10, 0),
    lac: jspb.Message.getFieldWithDefault(msg, 11, 0),
    cid: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcite.iot.model.v1.MobileNetworkInfo}
 */
proto.xcite.iot.model.v1.MobileNetworkInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcite.iot.model.v1.MobileNetworkInfo;
  return proto.xcite.iot.model.v1.MobileNetworkInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcite.iot.model.v1.MobileNetworkInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcite.iot.model.v1.MobileNetworkInfo}
 */
proto.xcite.iot.model.v1.MobileNetworkInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGsmSignal(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMcc(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMnc(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLac(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcite.iot.model.v1.MobileNetworkInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcite.iot.model.v1.MobileNetworkInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcite.iot.model.v1.MobileNetworkInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.iot.model.v1.MobileNetworkInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGsmSignal();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getMcc();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getMnc();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getLac();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getCid();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
};


/**
 * optional int32 gsm_signal = 8;
 * @return {number}
 */
proto.xcite.iot.model.v1.MobileNetworkInfo.prototype.getGsmSignal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.MobileNetworkInfo.prototype.setGsmSignal = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 mcc = 9;
 * @return {number}
 */
proto.xcite.iot.model.v1.MobileNetworkInfo.prototype.getMcc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.MobileNetworkInfo.prototype.setMcc = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 mnc = 10;
 * @return {number}
 */
proto.xcite.iot.model.v1.MobileNetworkInfo.prototype.getMnc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.MobileNetworkInfo.prototype.setMnc = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 lac = 11;
 * @return {number}
 */
proto.xcite.iot.model.v1.MobileNetworkInfo.prototype.getLac = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.MobileNetworkInfo.prototype.setLac = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 cid = 12;
 * @return {number}
 */
proto.xcite.iot.model.v1.MobileNetworkInfo.prototype.getCid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.MobileNetworkInfo.prototype.setCid = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.toObject = function(opt_includeInstance) {
  return proto.xcite.iot.model.v1.TrackerReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcite.iot.model.v1.TrackerReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.iot.model.v1.TrackerReport.toObject = function(includeInstance, msg) {
  var obj = {
    thingId: (f = msg.getThingId()) && x$cite_io_protos_model_basic_pb.UUID.toObject(includeInstance, f),
    gpsStatus: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestampUtc: (f = msg.getTimestampUtc()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    timestampLocal: (f = msg.getTimestampLocal()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && googleapis_google_type_latlng_pb.LatLng.toObject(includeInstance, f),
    speed: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    altitude: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    reportType: jspb.Message.getFieldWithDefault(msg, 8, ""),
    imsi: jspb.Message.getFieldWithDefault(msg, 9, ""),
    imei: jspb.Message.getFieldWithDefault(msg, 10, ""),
    mnInfo: (f = msg.getMnInfo()) && proto.xcite.iot.model.v1.MobileNetworkInfo.toObject(includeInstance, f),
    satellites: jspb.Message.getFieldWithDefault(msg, 12, 0),
    magnetometerX: jspb.Message.getFieldWithDefault(msg, 13, 0),
    magnetometerY: jspb.Message.getFieldWithDefault(msg, 14, 0),
    magnetometerZ: jspb.Message.getFieldWithDefault(msg, 15, 0),
    gyroscopeX: jspb.Message.getFieldWithDefault(msg, 16, 0),
    gyroscopeY: jspb.Message.getFieldWithDefault(msg, 17, 0),
    gyroscopeZ: jspb.Message.getFieldWithDefault(msg, 18, 0),
    accelerometerX: jspb.Message.getFieldWithDefault(msg, 19, 0),
    accelerometerY: jspb.Message.getFieldWithDefault(msg, 20, 0),
    accelerometerZ: jspb.Message.getFieldWithDefault(msg, 21, 0),
    hallResistance: jspb.Message.getFieldWithDefault(msg, 22, 0),
    heading: jspb.Message.getFieldWithDefault(msg, 23, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcite.iot.model.v1.TrackerReport}
 */
proto.xcite.iot.model.v1.TrackerReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcite.iot.model.v1.TrackerReport;
  return proto.xcite.iot.model.v1.TrackerReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcite.iot.model.v1.TrackerReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcite.iot.model.v1.TrackerReport}
 */
proto.xcite.iot.model.v1.TrackerReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new x$cite_io_protos_model_basic_pb.UUID;
      reader.readMessage(value,x$cite_io_protos_model_basic_pb.UUID.deserializeBinaryFromReader);
      msg.setThingId(value);
      break;
    case 2:
      var value = /** @type {!proto.xcite.iot.model.v1.TrackerReport.GpsFixStatus} */ (reader.readEnum());
      msg.setGpsStatus(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestampUtc(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestampLocal(value);
      break;
    case 5:
      var value = new googleapis_google_type_latlng_pb.LatLng;
      reader.readMessage(value,googleapis_google_type_latlng_pb.LatLng.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeed(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAltitude(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setReportType(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setImsi(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setImei(value);
      break;
    case 11:
      var value = new proto.xcite.iot.model.v1.MobileNetworkInfo;
      reader.readMessage(value,proto.xcite.iot.model.v1.MobileNetworkInfo.deserializeBinaryFromReader);
      msg.setMnInfo(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSatellites(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMagnetometerX(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMagnetometerY(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMagnetometerZ(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGyroscopeX(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGyroscopeY(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGyroscopeZ(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAccelerometerX(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAccelerometerY(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAccelerometerZ(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHallResistance(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeading(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcite.iot.model.v1.TrackerReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcite.iot.model.v1.TrackerReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.iot.model.v1.TrackerReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThingId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      x$cite_io_protos_model_basic_pb.UUID.serializeBinaryToWriter
    );
  }
  f = message.getGpsStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTimestampUtc();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTimestampLocal();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      googleapis_google_type_latlng_pb.LatLng.serializeBinaryToWriter
    );
  }
  f = message.getSpeed();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getAltitude();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getReportType();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getImsi();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getImei();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getMnInfo();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.xcite.iot.model.v1.MobileNetworkInfo.serializeBinaryToWriter
    );
  }
  f = message.getSatellites();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getMagnetometerX();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getMagnetometerY();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getMagnetometerZ();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getGyroscopeX();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getGyroscopeY();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getGyroscopeZ();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getAccelerometerX();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getAccelerometerY();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getAccelerometerZ();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getHallResistance();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getHeading();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.xcite.iot.model.v1.TrackerReport.GpsFixStatus = {
  GPS_FIX_NULL: 0,
  TWODFIX: 1,
  THREEDFIX: 2,
  FIX_NO: 3
};

/**
 * optional UUID thing_id = 1;
 * @return {?proto.xcite.iot.model.v1.UUID}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getThingId = function() {
  return /** @type{?proto.xcite.iot.model.v1.UUID} */ (
    jspb.Message.getWrapperField(this, x$cite_io_protos_model_basic_pb.UUID, 1));
};


/** @param {?proto.xcite.iot.model.v1.UUID|undefined} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setThingId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.clearThingId = function() {
  this.setThingId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.hasThingId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GpsFixStatus gps_status = 2;
 * @return {!proto.xcite.iot.model.v1.TrackerReport.GpsFixStatus}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getGpsStatus = function() {
  return /** @type {!proto.xcite.iot.model.v1.TrackerReport.GpsFixStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.xcite.iot.model.v1.TrackerReport.GpsFixStatus} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setGpsStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp timestamp_utc = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getTimestampUtc = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setTimestampUtc = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.clearTimestampUtc = function() {
  this.setTimestampUtc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.hasTimestampUtc = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp timestamp_local = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getTimestampLocal = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setTimestampLocal = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.clearTimestampLocal = function() {
  this.setTimestampLocal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.hasTimestampLocal = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.type.LatLng location = 5;
 * @return {?proto.google.type.LatLng}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getLocation = function() {
  return /** @type{?proto.google.type.LatLng} */ (
    jspb.Message.getWrapperField(this, googleapis_google_type_latlng_pb.LatLng, 5));
};


/** @param {?proto.google.type.LatLng|undefined} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float speed = 6;
 * @return {number}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getSpeed = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setSpeed = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float altitude = 7;
 * @return {number}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getAltitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setAltitude = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional string report_type = 8;
 * @return {string}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getReportType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setReportType = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string imsi = 9;
 * @return {string}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getImsi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setImsi = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string imei = 10;
 * @return {string}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getImei = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setImei = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional MobileNetworkInfo mn_info = 11;
 * @return {?proto.xcite.iot.model.v1.MobileNetworkInfo}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getMnInfo = function() {
  return /** @type{?proto.xcite.iot.model.v1.MobileNetworkInfo} */ (
    jspb.Message.getWrapperField(this, proto.xcite.iot.model.v1.MobileNetworkInfo, 11));
};


/** @param {?proto.xcite.iot.model.v1.MobileNetworkInfo|undefined} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setMnInfo = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.clearMnInfo = function() {
  this.setMnInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.hasMnInfo = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 satellites = 12;
 * @return {number}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getSatellites = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setSatellites = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 magnetometer_x = 13;
 * @return {number}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getMagnetometerX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setMagnetometerX = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 magnetometer_y = 14;
 * @return {number}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getMagnetometerY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setMagnetometerY = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 magnetometer_z = 15;
 * @return {number}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getMagnetometerZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setMagnetometerZ = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 gyroscope_x = 16;
 * @return {number}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getGyroscopeX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setGyroscopeX = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 gyroscope_y = 17;
 * @return {number}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getGyroscopeY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setGyroscopeY = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 gyroscope_z = 18;
 * @return {number}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getGyroscopeZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setGyroscopeZ = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 accelerometer_x = 19;
 * @return {number}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getAccelerometerX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setAccelerometerX = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 accelerometer_y = 20;
 * @return {number}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getAccelerometerY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setAccelerometerY = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int32 accelerometer_z = 21;
 * @return {number}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getAccelerometerZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setAccelerometerZ = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional int32 hall_resistance = 22;
 * @return {number}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getHallResistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setHallResistance = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int32 heading = 23;
 * @return {number}
 */
proto.xcite.iot.model.v1.TrackerReport.prototype.getHeading = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.TrackerReport.prototype.setHeading = function(value) {
  jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * @enum {number}
 */
proto.xcite.iot.model.v1.TrackerStatus = {
  TRACKER_STATUS_NULL: 0,
  STATIC_REPORTING_ON: 1,
  STATIC_REPORTING_OFF: 2,
  MOTION_DETECTION: 3,
  NO_CONFIG: 4
};

goog.object.extend(exports, proto.xcite.iot.model.v1);
