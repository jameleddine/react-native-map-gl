 /* eslint-disable */

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.xcite.iot.model.v1.Chassis', null, global);
goog.exportSymbol('proto.xcite.iot.model.v1.Dimensions', null, global);
goog.exportSymbol('proto.xcite.iot.model.v1.Engine', null, global);
goog.exportSymbol('proto.xcite.iot.model.v1.Engine.EngineType', null, global);
goog.exportSymbol('proto.xcite.iot.model.v1.Tyre', null, global);
goog.exportSymbol('proto.xcite.iot.model.v1.Vehicle', null, global);
goog.exportSymbol('proto.xcite.iot.model.v1.VehicleType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcite.iot.model.v1.Engine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcite.iot.model.v1.Engine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcite.iot.model.v1.Engine.displayName = 'proto.xcite.iot.model.v1.Engine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcite.iot.model.v1.Vehicle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcite.iot.model.v1.Vehicle.repeatedFields_, null);
};
goog.inherits(proto.xcite.iot.model.v1.Vehicle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcite.iot.model.v1.Vehicle.displayName = 'proto.xcite.iot.model.v1.Vehicle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcite.iot.model.v1.Dimensions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcite.iot.model.v1.Dimensions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcite.iot.model.v1.Dimensions.displayName = 'proto.xcite.iot.model.v1.Dimensions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcite.iot.model.v1.Chassis = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcite.iot.model.v1.Chassis, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcite.iot.model.v1.Chassis.displayName = 'proto.xcite.iot.model.v1.Chassis';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcite.iot.model.v1.Tyre = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcite.iot.model.v1.Tyre, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcite.iot.model.v1.Tyre.displayName = 'proto.xcite.iot.model.v1.Tyre';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcite.iot.model.v1.Engine.prototype.toObject = function(opt_includeInstance) {
  return proto.xcite.iot.model.v1.Engine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcite.iot.model.v1.Engine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.iot.model.v1.Engine.toObject = function(includeInstance, msg) {
  var obj = {
    volume: jspb.Message.getFieldWithDefault(msg, 1, 0),
    engineType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bore: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    stroke: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    coolingSystem: jspb.Message.getFieldWithDefault(msg, 5, ""),
    compressionRatio: jspb.Message.getFieldWithDefault(msg, 6, ""),
    powerMax: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    torqueMax: +jspb.Message.getFieldWithDefault(msg, 8, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcite.iot.model.v1.Engine}
 */
proto.xcite.iot.model.v1.Engine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcite.iot.model.v1.Engine;
  return proto.xcite.iot.model.v1.Engine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcite.iot.model.v1.Engine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcite.iot.model.v1.Engine}
 */
proto.xcite.iot.model.v1.Engine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVolume(value);
      break;
    case 2:
      var value = /** @type {!proto.xcite.iot.model.v1.Engine.EngineType} */ (reader.readEnum());
      msg.setEngineType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBore(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStroke(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoolingSystem(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompressionRatio(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPowerMax(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTorqueMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcite.iot.model.v1.Engine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcite.iot.model.v1.Engine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcite.iot.model.v1.Engine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.iot.model.v1.Engine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVolume();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEngineType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getBore();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getStroke();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getCoolingSystem();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCompressionRatio();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPowerMax();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getTorqueMax();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.xcite.iot.model.v1.Engine.EngineType = {
  ENGINE_TYPE_NULL: 0,
  SINGLE_CYLINDER: 1,
  DOHC: 2,
  FOUR_VALVE: 3,
  FOUR_STROKE: 4
};

/**
 * optional int32 volume = 1;
 * @return {number}
 */
proto.xcite.iot.model.v1.Engine.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Engine.prototype.setVolume = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional EngineType engine_type = 2;
 * @return {!proto.xcite.iot.model.v1.Engine.EngineType}
 */
proto.xcite.iot.model.v1.Engine.prototype.getEngineType = function() {
  return /** @type {!proto.xcite.iot.model.v1.Engine.EngineType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.xcite.iot.model.v1.Engine.EngineType} value */
proto.xcite.iot.model.v1.Engine.prototype.setEngineType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional float bore = 3;
 * @return {number}
 */
proto.xcite.iot.model.v1.Engine.prototype.getBore = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Engine.prototype.setBore = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float stroke = 4;
 * @return {number}
 */
proto.xcite.iot.model.v1.Engine.prototype.getStroke = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Engine.prototype.setStroke = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional string cooling_system = 5;
 * @return {string}
 */
proto.xcite.iot.model.v1.Engine.prototype.getCoolingSystem = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.xcite.iot.model.v1.Engine.prototype.setCoolingSystem = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string compression_ratio = 6;
 * @return {string}
 */
proto.xcite.iot.model.v1.Engine.prototype.getCompressionRatio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.xcite.iot.model.v1.Engine.prototype.setCompressionRatio = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional float power_max = 7;
 * @return {number}
 */
proto.xcite.iot.model.v1.Engine.prototype.getPowerMax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Engine.prototype.setPowerMax = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float torque_max = 8;
 * @return {number}
 */
proto.xcite.iot.model.v1.Engine.prototype.getTorqueMax = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Engine.prototype.setTorqueMax = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcite.iot.model.v1.Vehicle.repeatedFields_ = [100];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.toObject = function(opt_includeInstance) {
  return proto.xcite.iot.model.v1.Vehicle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcite.iot.model.v1.Vehicle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.iot.model.v1.Vehicle.toObject = function(includeInstance, msg) {
  var obj = {
    vehicleType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    licencePlate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mfgYear: jspb.Message.getFieldWithDefault(msg, 3, 0),
    engine: (f = msg.getEngine()) && proto.xcite.iot.model.v1.Engine.toObject(includeInstance, f),
    chassis: (f = msg.getChassis()) && proto.xcite.iot.model.v1.Chassis.toObject(includeInstance, f),
    airCondition: jspb.Message.getFieldWithDefault(msg, 6, false),
    seatingCapacity: jspb.Message.getFieldWithDefault(msg, 7, 0),
    emptyWeightKg: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    fullWeightKg: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    fuelTankCapacity: jspb.Message.getFieldWithDefault(msg, 10, 0),
    wheelBase: jspb.Message.getFieldWithDefault(msg, 11, 0),
    track: jspb.Message.getFieldWithDefault(msg, 12, 0),
    tyreList: jspb.Message.toObjectList(msg.getTyreList(),
    proto.xcite.iot.model.v1.Tyre.toObject, includeInstance),
    created: (f = msg.getCreated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    lastModified: (f = msg.getLastModified()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcite.iot.model.v1.Vehicle}
 */
proto.xcite.iot.model.v1.Vehicle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcite.iot.model.v1.Vehicle;
  return proto.xcite.iot.model.v1.Vehicle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcite.iot.model.v1.Vehicle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcite.iot.model.v1.Vehicle}
 */
proto.xcite.iot.model.v1.Vehicle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.xcite.iot.model.v1.VehicleType} */ (reader.readEnum());
      msg.setVehicleType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLicencePlate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMfgYear(value);
      break;
    case 4:
      var value = new proto.xcite.iot.model.v1.Engine;
      reader.readMessage(value,proto.xcite.iot.model.v1.Engine.deserializeBinaryFromReader);
      msg.setEngine(value);
      break;
    case 5:
      var value = new proto.xcite.iot.model.v1.Chassis;
      reader.readMessage(value,proto.xcite.iot.model.v1.Chassis.deserializeBinaryFromReader);
      msg.setChassis(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAirCondition(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeatingCapacity(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEmptyWeightKg(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFullWeightKg(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFuelTankCapacity(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWheelBase(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTrack(value);
      break;
    case 100:
      var value = new proto.xcite.iot.model.v1.Tyre;
      reader.readMessage(value,proto.xcite.iot.model.v1.Tyre.deserializeBinaryFromReader);
      msg.addTyre(value);
      break;
    case 101:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreated(value);
      break;
    case 102:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLastModified(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcite.iot.model.v1.Vehicle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcite.iot.model.v1.Vehicle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.iot.model.v1.Vehicle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVehicleType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLicencePlate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMfgYear();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getEngine();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.xcite.iot.model.v1.Engine.serializeBinaryToWriter
    );
  }
  f = message.getChassis();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.xcite.iot.model.v1.Chassis.serializeBinaryToWriter
    );
  }
  f = message.getAirCondition();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getSeatingCapacity();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getEmptyWeightKg();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getFullWeightKg();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getFuelTankCapacity();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getWheelBase();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getTrack();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getTyreList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      100,
      f,
      proto.xcite.iot.model.v1.Tyre.serializeBinaryToWriter
    );
  }
  f = message.getCreated();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLastModified();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional VehicleType vehicle_type = 1;
 * @return {!proto.xcite.iot.model.v1.VehicleType}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.getVehicleType = function() {
  return /** @type {!proto.xcite.iot.model.v1.VehicleType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.xcite.iot.model.v1.VehicleType} value */
proto.xcite.iot.model.v1.Vehicle.prototype.setVehicleType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string licence_plate = 2;
 * @return {string}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.getLicencePlate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xcite.iot.model.v1.Vehicle.prototype.setLicencePlate = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 mfg_year = 3;
 * @return {number}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.getMfgYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Vehicle.prototype.setMfgYear = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Engine engine = 4;
 * @return {?proto.xcite.iot.model.v1.Engine}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.getEngine = function() {
  return /** @type{?proto.xcite.iot.model.v1.Engine} */ (
    jspb.Message.getWrapperField(this, proto.xcite.iot.model.v1.Engine, 4));
};


/** @param {?proto.xcite.iot.model.v1.Engine|undefined} value */
proto.xcite.iot.model.v1.Vehicle.prototype.setEngine = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.xcite.iot.model.v1.Vehicle.prototype.clearEngine = function() {
  this.setEngine(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.hasEngine = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Chassis chassis = 5;
 * @return {?proto.xcite.iot.model.v1.Chassis}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.getChassis = function() {
  return /** @type{?proto.xcite.iot.model.v1.Chassis} */ (
    jspb.Message.getWrapperField(this, proto.xcite.iot.model.v1.Chassis, 5));
};


/** @param {?proto.xcite.iot.model.v1.Chassis|undefined} value */
proto.xcite.iot.model.v1.Vehicle.prototype.setChassis = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.xcite.iot.model.v1.Vehicle.prototype.clearChassis = function() {
  this.setChassis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.hasChassis = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool air_condition = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.getAirCondition = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.xcite.iot.model.v1.Vehicle.prototype.setAirCondition = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional int32 seating_capacity = 7;
 * @return {number}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.getSeatingCapacity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Vehicle.prototype.setSeatingCapacity = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional float empty_weight_kg = 8;
 * @return {number}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.getEmptyWeightKg = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Vehicle.prototype.setEmptyWeightKg = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float full_weight_kg = 9;
 * @return {number}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.getFullWeightKg = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Vehicle.prototype.setFullWeightKg = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional int32 fuel_tank_capacity = 10;
 * @return {number}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.getFuelTankCapacity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Vehicle.prototype.setFuelTankCapacity = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 wheel_base = 11;
 * @return {number}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.getWheelBase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Vehicle.prototype.setWheelBase = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 track = 12;
 * @return {number}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.getTrack = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Vehicle.prototype.setTrack = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * repeated Tyre tyre = 100;
 * @return {!Array<!proto.xcite.iot.model.v1.Tyre>}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.getTyreList = function() {
  return /** @type{!Array<!proto.xcite.iot.model.v1.Tyre>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcite.iot.model.v1.Tyre, 100));
};


/** @param {!Array<!proto.xcite.iot.model.v1.Tyre>} value */
proto.xcite.iot.model.v1.Vehicle.prototype.setTyreList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 100, value);
};


/**
 * @param {!proto.xcite.iot.model.v1.Tyre=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcite.iot.model.v1.Tyre}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.addTyre = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 100, opt_value, proto.xcite.iot.model.v1.Tyre, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.xcite.iot.model.v1.Vehicle.prototype.clearTyreList = function() {
  this.setTyreList([]);
};


/**
 * optional google.protobuf.Timestamp created = 101;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.getCreated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 101));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.xcite.iot.model.v1.Vehicle.prototype.setCreated = function(value) {
  jspb.Message.setWrapperField(this, 101, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.xcite.iot.model.v1.Vehicle.prototype.clearCreated = function() {
  this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional google.protobuf.Timestamp last_modified = 102;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.getLastModified = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 102));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.xcite.iot.model.v1.Vehicle.prototype.setLastModified = function(value) {
  jspb.Message.setWrapperField(this, 102, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.xcite.iot.model.v1.Vehicle.prototype.clearLastModified = function() {
  this.setLastModified(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcite.iot.model.v1.Vehicle.prototype.hasLastModified = function() {
  return jspb.Message.getField(this, 102) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcite.iot.model.v1.Dimensions.prototype.toObject = function(opt_includeInstance) {
  return proto.xcite.iot.model.v1.Dimensions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcite.iot.model.v1.Dimensions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.iot.model.v1.Dimensions.toObject = function(includeInstance, msg) {
  var obj = {
    length: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    width: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    height: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcite.iot.model.v1.Dimensions}
 */
proto.xcite.iot.model.v1.Dimensions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcite.iot.model.v1.Dimensions;
  return proto.xcite.iot.model.v1.Dimensions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcite.iot.model.v1.Dimensions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcite.iot.model.v1.Dimensions}
 */
proto.xcite.iot.model.v1.Dimensions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLength(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcite.iot.model.v1.Dimensions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcite.iot.model.v1.Dimensions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcite.iot.model.v1.Dimensions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.iot.model.v1.Dimensions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLength();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float length = 1;
 * @return {number}
 */
proto.xcite.iot.model.v1.Dimensions.prototype.getLength = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Dimensions.prototype.setLength = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float width = 2;
 * @return {number}
 */
proto.xcite.iot.model.v1.Dimensions.prototype.getWidth = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Dimensions.prototype.setWidth = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float height = 3;
 * @return {number}
 */
proto.xcite.iot.model.v1.Dimensions.prototype.getHeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Dimensions.prototype.setHeight = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcite.iot.model.v1.Chassis.prototype.toObject = function(opt_includeInstance) {
  return proto.xcite.iot.model.v1.Chassis.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcite.iot.model.v1.Chassis} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.iot.model.v1.Chassis.toObject = function(includeInstance, msg) {
  var obj = {
    chassisNumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dimension: (f = msg.getDimension()) && proto.xcite.iot.model.v1.Dimensions.toObject(includeInstance, f),
    groundClearance: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcite.iot.model.v1.Chassis}
 */
proto.xcite.iot.model.v1.Chassis.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcite.iot.model.v1.Chassis;
  return proto.xcite.iot.model.v1.Chassis.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcite.iot.model.v1.Chassis} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcite.iot.model.v1.Chassis}
 */
proto.xcite.iot.model.v1.Chassis.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChassisNumber(value);
      break;
    case 2:
      var value = new proto.xcite.iot.model.v1.Dimensions;
      reader.readMessage(value,proto.xcite.iot.model.v1.Dimensions.deserializeBinaryFromReader);
      msg.setDimension(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroundClearance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcite.iot.model.v1.Chassis.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcite.iot.model.v1.Chassis.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcite.iot.model.v1.Chassis} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.iot.model.v1.Chassis.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChassisNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDimension();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.xcite.iot.model.v1.Dimensions.serializeBinaryToWriter
    );
  }
  f = message.getGroundClearance();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string chassis_number = 1;
 * @return {string}
 */
proto.xcite.iot.model.v1.Chassis.prototype.getChassisNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xcite.iot.model.v1.Chassis.prototype.setChassisNumber = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Dimensions dimension = 2;
 * @return {?proto.xcite.iot.model.v1.Dimensions}
 */
proto.xcite.iot.model.v1.Chassis.prototype.getDimension = function() {
  return /** @type{?proto.xcite.iot.model.v1.Dimensions} */ (
    jspb.Message.getWrapperField(this, proto.xcite.iot.model.v1.Dimensions, 2));
};


/** @param {?proto.xcite.iot.model.v1.Dimensions|undefined} value */
proto.xcite.iot.model.v1.Chassis.prototype.setDimension = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.xcite.iot.model.v1.Chassis.prototype.clearDimension = function() {
  this.setDimension(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcite.iot.model.v1.Chassis.prototype.hasDimension = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 ground_clearance = 3;
 * @return {number}
 */
proto.xcite.iot.model.v1.Chassis.prototype.getGroundClearance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Chassis.prototype.setGroundClearance = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcite.iot.model.v1.Tyre.prototype.toObject = function(opt_includeInstance) {
  return proto.xcite.iot.model.v1.Tyre.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcite.iot.model.v1.Tyre} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.iot.model.v1.Tyre.toObject = function(includeInstance, msg) {
  var obj = {
    nominalSectionWidth: jspb.Message.getFieldWithDefault(msg, 1, 0),
    aspectRatio: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    nominalDiameter: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    maximumLoadCapacity: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    maximumSpeed: +jspb.Message.getFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcite.iot.model.v1.Tyre}
 */
proto.xcite.iot.model.v1.Tyre.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcite.iot.model.v1.Tyre;
  return proto.xcite.iot.model.v1.Tyre.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcite.iot.model.v1.Tyre} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcite.iot.model.v1.Tyre}
 */
proto.xcite.iot.model.v1.Tyre.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNominalSectionWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAspectRatio(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNominalDiameter(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaximumLoadCapacity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaximumSpeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcite.iot.model.v1.Tyre.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcite.iot.model.v1.Tyre.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcite.iot.model.v1.Tyre} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcite.iot.model.v1.Tyre.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNominalSectionWidth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAspectRatio();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getNominalDiameter();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getMaximumLoadCapacity();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getMaximumSpeed();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional int32 nominal_section_width = 1;
 * @return {number}
 */
proto.xcite.iot.model.v1.Tyre.prototype.getNominalSectionWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Tyre.prototype.setNominalSectionWidth = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float aspect_ratio = 2;
 * @return {number}
 */
proto.xcite.iot.model.v1.Tyre.prototype.getAspectRatio = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Tyre.prototype.setAspectRatio = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float nominal_diameter = 3;
 * @return {number}
 */
proto.xcite.iot.model.v1.Tyre.prototype.getNominalDiameter = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Tyre.prototype.setNominalDiameter = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float maximum_load_capacity = 4;
 * @return {number}
 */
proto.xcite.iot.model.v1.Tyre.prototype.getMaximumLoadCapacity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Tyre.prototype.setMaximumLoadCapacity = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float maximum_speed = 5;
 * @return {number}
 */
proto.xcite.iot.model.v1.Tyre.prototype.getMaximumSpeed = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.xcite.iot.model.v1.Tyre.prototype.setMaximumSpeed = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.xcite.iot.model.v1.VehicleType = {
  VEHICLE_TYPE_NULL: 0,
  BICYCLE: 1,
  CAR_WITH_TRAILER: 2,
  DELIVERY_TRUCK: 3,
  EMERGENCY_VEHICLE: 4,
  EMPLOYEE_VEHICLE: 5,
  FACILITY_VEHICLE: 6,
  FARM_VEHICLE: 7,
  HIGH_OCCUPANCY_VEHICLE: 8,
  LIGHT_VEHICLE: 9,
  MAIL_VEHICLE: 10,
  MILITARY_VEHICLE: 11,
  MOPED: 12,
  MOTORCYCLE: 13,
  PASSENGER_CAR: 14,
  PEDESTRIAN: 15,
  PRIVATE_BUS: 16,
  PUBLIC_BUS: 17,
  RESIDENTIAL_VEHICLE: 18,
  SCHOOL_BUS: 19,
  SNOW_CHAIN_EQUIPPED_VEHICLE: 20,
  TANKER: 21,
  TAXI: 22,
  TRANSPORT_TRUCK: 23,
  TROLLEY_BUS: 24,
  VEHICLE_FOR_DISABLED_PERSON: 25,
  VEHICLE_WITH_EXPLOSIVE_LOAD: 26,
  VEHICLE_WITH_OTHER_DANGEROUS_LOAD: 27,
  VEHICLE_WITH_WATER_POLLUTING_LOAD: 28,
  CAR: 29,
  AMBULANCE: 30,
  SWEEPER: 31,
  FIRE_ENGINE: 32,
  MINI_BUS: 33,
  SPARE: 34,
  TRUCK: 35,
  SIDECAR: 36,
  ALL_VEHICLE: 37
};

goog.object.extend(exports, proto.xcite.iot.model.v1);
